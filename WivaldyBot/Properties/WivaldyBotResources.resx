<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AlertAskInstant" xml:space="preserve">
    <value>Which kind of event follow-up do you want?</value>
  </data>
  <data name="AlertChange" xml:space="preserve">
    <value>Update your existing follow-up ?</value>
  </data>
  <data name="AlertChangeInstant" xml:space="preserve">
    <value>Every {0} seconds with a threshold of {1} watts.</value>
  </data>
  <data name="AlertChangeTotal" xml:space="preserve">
    <value>Every {0} seconds with a threshold of {1} kWh.</value>
  </data>
  <data name="AlertInstant" xml:space="preserve">
    <value>Realtime consumption.</value>
  </data>
  <data name="AlertInterval" xml:space="preserve">
    <value>Please enter interval in seconds.</value>
  </data>
  <data name="AlertReallySorry" xml:space="preserve">
    <value>I'm sorry I didn't understand, please try again later.</value>
  </data>
  <data name="AlertRetryInterval" xml:space="preserve">
    <value>I'm sorry I did not understand, I'm awaiting a number of seconds.</value>
  </data>
  <data name="AlertRetryThreshold" xml:space="preserve">
    <value>I'm sorry I did not undersant, I'm awaiting a number for the threshold. Make sure you are using {0} as a decimal separator.</value>
  </data>
  <data name="AlertThresholdkWh" xml:space="preserve">
    <value>Please enter your threshold in kWh.</value>
  </data>
  <data name="AlertThresholdWatts" xml:space="preserve">
    <value>Please enter your threshold in watts.</value>
  </data>
  <data name="AlertTotal" xml:space="preserve">
    <value>Total</value>
  </data>
  <data name="CompareConsumptionBad" xml:space="preserve">
    <value>![Augmentation]({0}/Images/wivaldy_icon_home-overload-200x200.png)</value>
  </data>
  <data name="CompareConsumptionGood" xml:space="preserve">
    <value>![Lowering]({0}/Images/wivaldy_icon_home-sleepy-200x200.png)</value>
  </data>
  <data name="CompareConsumptionkWh" xml:space="preserve">
    <value>{0} kWh vs {1} kWh.\r\n\r\n</value>
  </data>
  <data name="CompareConsumptionLastHourYesterday" xml:space="preserve">
    <value>Your total consumption by comparing today for the last hour and yesterday at the same time is </value>
  </data>
  <data name="CompareConsumptionTodayYesterday" xml:space="preserve">
    <value>Your total consumption by comparing today and yesterday (at the same time) is </value>
  </data>
  <data name="CompareConsumptionYesterdayDayBefore" xml:space="preserve">
    <value>Your total consumption by comparing yesterday and the day before is </value>
  </data>
  <data name="DialogActivitySelect" xml:space="preserve">
    <value>Select your activity</value>
  </data>
  <data name="DialogActivityTellUs" xml:space="preserve">
    <value>Tell me what you need</value>
  </data>
  <data name="DialogCompareLastHourYesterdaySameTime" xml:space="preserve">
    <value>Last hour with yesterday at same time</value>
  </data>
  <data name="DialogCompareTodayYesterday" xml:space="preserve">
    <value>Today and yesterday</value>
  </data>
  <data name="DialogCompareYesterdayDayBefore" xml:space="preserve">
    <value>Yesterday and the day before</value>
  </data>
  <data name="DialogConfirmationKey" xml:space="preserve">
    <value>Thanks!</value>
  </data>
  <data name="DialogConsumptionDay" xml:space="preserve">
    <value>Today</value>
  </data>
  <data name="DialogConsumptionHour" xml:space="preserve">
    <value>Last hour</value>
  </data>
  <data name="DialogConsumptionInstant" xml:space="preserve">
    <value>Realtime consumption</value>
  </data>
  <data name="DialogConsumptionLastDay" xml:space="preserve">
    <value>Last day</value>
  </data>
  <data name="DialogElectricityConsumption" xml:space="preserve">
    <value>Electricity consumption</value>
  </data>
  <data name="DialogElectricityTellUs" xml:space="preserve">
    <value>Please select the consumption:</value>
  </data>
  <data name="DialogErrorMessage" xml:space="preserve">
    <value>Ups, something went wrong.</value>
  </data>
  <data name="DialogGetPrivateKey" xml:space="preserve">
    <value>Before we get started, can you please give me your private key?</value>
  </data>
  <data name="DialogKeyIs" xml:space="preserve">
    <value>Your key is {0}.</value>
  </data>
  <data name="DialogKeyRemoved" xml:space="preserve">
    <value>Your key has been removed.</value>
  </data>
  <data name="DialogNo" xml:space="preserve">
    <value>No</value>
  </data>
  <data name="DialogWelcomeAlert" xml:space="preserve">
    <value>Event follow-up</value>
  </data>
  <data name="DialogWelcomeCompare" xml:space="preserve">
    <value>Comparison</value>
  </data>
  <data name="DialogWelcomeElectricity" xml:space="preserve">
    <value>Electricity consumption</value>
  </data>
  <data name="DialogWelcomeKey" xml:space="preserve">
    <value>Private key</value>
  </data>
  <data name="DialogWelcomeLogout" xml:space="preserve">
    <value>Logout</value>
  </data>
  <data name="DialogWelcomeMessage" xml:space="preserve">
    <value>Welcome to Wivaldy assistant, just write anything and I'll help you :-) Type 'key' to get your current key, 'logout' to clear your key.</value>
  </data>
  <data name="DialogYes" xml:space="preserve">
    <value>Yes</value>
  </data>
  <data name="TotalConsumptionInstant" xml:space="preserve">
    <value>{0} watts.</value>
  </data>
  <data name="TotalConsumptionKwh" xml:space="preserve">
    <value>{0} kWh. Cost is approximately {1} €.</value>
  </data>
  <data name="TotalConsumptionLastHour" xml:space="preserve">
    <value>Your total consumption for the last hour is </value>
  </data>
  <data name="TotalConsumptionNoData" xml:space="preserve">
    <value>Sorry, there is no data available.</value>
  </data>
  <data name="TotalConsumptionNow" xml:space="preserve">
    <value>Your realtime consumption is </value>
  </data>
  <data name="TotalConsumptionTodayIs" xml:space="preserve">
    <value>Your total consumption for today is </value>
  </data>
  <data name="TotalConsumptionYesterday" xml:space="preserve">
    <value>Your total consumption for yesterday is </value>
  </data>
  <data name="WivaldiConnectionString" xml:space="preserve">
    <value>wivaldystring</value>
    <comment>Do not localize</comment>
  </data>
  <data name="AlertEnd" xml:space="preserve">
    <value>*End of events follow-up.* You can set a new follow-up.</value>
  </data>
  <data name="AlertEndMax" xml:space="preserve">
    <value>*End of events follow-up.* You've reached the maximum number of follow-up for this session. Please schedule another follow-up to receive more realtime information.</value>
  </data>
  <data name="AlertExceedInstant" xml:space="preserve">
    <value>**Your consumption exceed your threshold**: {0} watts vs {1} watts.</value>
  </data>
  <data name="AlertExceedTotal" xml:space="preserve">
    <value>**Your consumption exceed your threshold**: {0} kWh vs {1} kWh.</value>
  </data>
  <data name="AlertMaxTime" xml:space="preserve">
    <value>The maximum range of minutes you can be notified is {0} minutes. Setting it to the maximum.</value>
  </data>
  <data name="AlertMinSec" xml:space="preserve">
    <value>The minimum number of seconds between two refresh is fixed at {0}. Setting it to the minimum.</value>
  </data>
  <data name="AlertOK" xml:space="preserve">
    <value>You have setup a new event follow-up: </value>
  </data>
  <data name="AlertRetryMaxTime" xml:space="preserve">
    <value>I'm sorry I did not understand, please enter a number of minutes.</value>
  </data>
  <data name="AlertTime" xml:space="preserve">
    <value>Please enter the period (in minutes) you want to receive notifications.</value>
  </data>
  <data name="AlertChangeSwitch" xml:space="preserve">
    <value>Check remote command every {0} seconds.</value>
  </data>
  <data name="AlertExceedSwitch" xml:space="preserve">
    <value>**Device command** {0}</value>
  </data>
  <data name="AlertSwitch" xml:space="preserve">
    <value>Device remote commands</value>
  </data>
  <data name="AlertThresholdSwitch" xml:space="preserve">
    <value>Please enter SWITCH TODO NOTIMPLEMENTED</value>
  </data>
</root>